#!/bin/ksh
#
# check-host -- check if one or several hosts are alive and send status
#               notifications
#
# Usage: check-host
#        check-host -f config-file
#        check-host -n config-file
#
# Assumptions: The system is OpenBSD-stable or -current.
#
# Dependencies: cURL
#
# Last Changed: 2018-09-20 13:40:55 CEST
#
# Copyright (c) 2015-2018, Joel A. HÃ¤nel <joel@hanel.nu>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#

################################################################################
# PRAGMAS
################################################################################

set -u
trap "die" HUP INT QUIT TERM

################################################################################
# CONFIGURATION
# Should be set with a configuration file; the default is /etc/check-host.conf.
################################################################################

MASTERS=""
HOSTS=""
PUSHOVER_TOKEN=""
PUSHOVER_USER=""

################################################################################
# CONSTANTS
################################################################################

NAME=${0##*/}
CHECKPOINT="https://duckduckgo.com/?q=openbsd"
MESSENGER="$(/bin/hostname -s | perl -nle 'print "\u\L$_"')"

################################################################################
# SUBROUTINES
################################################################################

# Source: https://apenwarr.ca/log/20110228
echo() {
    # remove this line if you don't want to support "-n"
    [ "$1" = -n ] && { shift; FMT="%s"; } || FMT="%s\n"
    printf "$FMT" "${*}"
}

die() {
    echo "${*}"
    exit 1
}

usage() {
    echo
    echo "Usage: $NAME [-fn] filename" >&2
    echo
    echo "Options:"
    echo "  -f    config file"
    echo "  -n    test configuration"
    echo
    exit 1
}

#===============================================================================

notify() {
    local title=$1
    local message=$2
    curl -s \
        --form-string "token=$PUSHOVER_TOKEN" \
        --form-string "user=$PUSHOVER_USER" \
        --form-string "title=$title" \
        --form-string "message=$message" \
        https://api.pushover.net/1/messages.json \
        > /dev/null &
}

ping_target() {
    local target=$1
    local trial=0
    local limit=10
    local pong
    while [ "$trial" -lt "$limit" ]; do
        if /sbin/ping -c 1 -q "$target" > /dev/null; then
            pong=1
            break
        else
            pong=0
        fi
        trial=$((trial + 1))
        sleep 1
    done
    return "$pong"
}

################################################################################
# MAIN
################################################################################

[ "$(/usr/bin/id -u)" -eq 0 ] && die "You cannot run $NAME with root privileges"
[ -x "/usr/local/bin/curl" ]  || die "cURL is not installed"

config_file=""
test_config=0
while getopts 'f:n' arg; do
    case $arg in
    f)  config_file="$OPTARG";;
    n)  test_config=1 ;;
    *)  usage ;;
    esac
done

# Configuration
[ -z "$config_file" ] && config_file="/etc/check-host.conf"
if [ -f "$config_file" ]; then
    # shellcheck source=/dev/null
    . "$config_file"
else
    die "The configuration file $config_file does not exist"
fi

# Cache
cache_dir="/tmp/$NAME"
if [ -d "$cache_dir" ]; then
    # Touch it so that daily(8) does not remove it.
    /usr/bin/touch "$cache_dir"
else
    /bin/mkdir -p "$cache_dir" || die "Could NOT create the temporary cache"
fi

# Internet connection?
# Do not want to create a record if this host has no internet connection.
if [ -n "$CHECKPOINT" ]; then
    if ! /usr/bin/ftp -o - "${CHECKPOINT}" > /dev/null; then
        die "No internet connection; cannot proceed"
    fi
else
    die "No checkpoint was defined"
fi

# Test config?
if [ $test_config -eq 1 ]; then
    notify "A trick from Nakor"
    exit 0
fi

# Master? 
if [ -n "$MASTERS" ]; then
    for master in $MASTERS; do
        if ping_target "$master"; then
            exit 0
        fi
    done
fi

# Checking
[ -z "$HOSTS" ] && die "No hosts are defined"
for target in $HOSTS; do
    local cache="${cache_dir}/${target}"
    if ping_target "$target"; then
        local count
        local minutes
        if [ -f "$cache" ]; then
            count="$(cat "$cache")"
            if [ "$count" -le 6 ]; then
                minutes=60
            elif [ "$count" -gt 6 ] && [ "$count" -le 12 ]; then
                minutes=120
            else
                minutes=720
            fi
            if [ "$(/usr/bin/find "$cache" -mmin +$minutes)" ]; then
                count=$((count + 1))
                echo "$count" > "$cache"
                notify "${target}" "Still NOT responding to $MESSENGER"
            fi
        else
            echo "1" > "$cache"
            notify "${target}" "NOT responding to $MESSENGER"
        fi
    else
        if [ -f "$cache" ]; then
            /bin/rm "$cache"
            notify "${target}" "Has responded to $MESSENGER"
        fi
    fi &
done

exit 0
